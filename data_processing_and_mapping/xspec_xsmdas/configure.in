dnl Process this file with autoconf to produce a configure script.
AC_INIT

AC_REVISION($Revision$)

AC_PREREQ(2.59)

if test "x$target_alias" != "x"; then
  target_alias_used="yes"
fi

AC_CANONICAL_TARGET([])

#-------------------------------------------------------------------------------
# Add GNU libc version to end of host string on Linux:
glibc_version=
if test `echo $host | grep -c linux` -ne 0; then
   if test -f /bin/sh; then
     changequote(,)
     # ldd should provide the GLIBC version number string:
     glibc_version=`ldd --version | grep ldd | sed 's:.*)[ ]*::'`
     # If glibc_version is empty or contains anything non-numeric, try another route:
     if test "x$glibc_version" = "x" -o `echo $glibc_version | grep -c '[^.0-9]'` != 0; then
       # Find the C library:
       libc_ldd=`ldd /bin/sh | grep -w libc`
       if test "x$libc_ldd" != "x"; then
         # Strip down to path plus library:
         libc=`echo $libc_ldd | sed 's:.*=>[ ]::' | sed 's:[ ].*::'`
         if test "x$libc" != "x"; then
           if test -x "$libc"; then
             # "Run" the library and sed out leading and trailing text:
             version=`$libc | grep -i roland | sed 's:^[^0-9]*::' | sed 's:[^0-9]*$::' | sed 's:[A-Z].*$::' | sed 's:[a-z].*$::' | sed 's:[ ].*::'`
             # If the first grep failed to get the version string, try another route:
             if test "x$version" = "x"; then
               version=`$libc | grep -i version | grep -i release | grep -i library | sed 's:^[^0-9]*::' | sed 's:[^0-9]*$::' | sed 's:[A-Z].*$::' | sed 's:[a-z].*$::' | sed 's:[ ].*::'`
             fi
           fi
           # If version still contains anything non-numeric, forget it and move on:
           if test `echo $version | grep -c '[^.0-9]'` != 0; then
             version=""
           fi
           if test "x$version" != "x"; then
             glibc_version="-libc$version"
           fi
         fi
       fi
     else
       glibc_version="-libc$glibc_version"
     fi
     changequote([,])
   fi
fi
if test "x$glibc_version" != "x"; then
  host=$host$glibc_version
  AC_MSG_RESULT(modified Linux system type is $host)
fi

UNAME_SYSTEM=`(uname -s) 2>/dev/null` || UNAME_SYSTEM=unknown

#-------------------------------------------------------------------------------

h_all_components="heacore tcltk attitude heasptools heatools heagen Xspec demo ftools heasim calet hitomixrism integral ixpe maxi nicer nustar suzaku swift external glast GSSC"
h_components=

#-------------------------------------------------------------------------------
# Option --with-components allows configuration to be specified on command line.
AC_ARG_WITH(
  components,
  [AS_HELP_STRING([--with-components],
    [Specify a subset of existing HEADAS components to configure (enclosed in
     quotes).  Current choices are: "heacore tcltk attitude heasptools heatools heagen Xspec demo ftools heasim calet hitomixrism integral ixpe maxi nicer nustar suzaku swift external glast GSSC".
     Default is all existing components.])],
  h_components=$withval
)

# With --enable-collapse=yes, all of the component-level directories
# are removed ("collapsed") in the installed directory structure, i.e.
# so we have no installed heasoft/<component> folders, for example
# only a single heasoft/<arch>/bin without any symbolic links into e.g.
# heasoft/<component>/<arch>/bin.
#
# With --enable-collapse=all, the installed structure is collapsed
# even further, with no architecture-specific <arch> folder in the
# path.  This more closely mimics a standard GNU-like install
# structure where if you use --prefix=$prefix then you end up with
# $prefix/bin, $prefix/lib, $prefix/include, etc.
#
# Note that with either option, there are no longer individual hmakerc
# resource files for each specific component available in the installed
# location, i.e. so that using "hmake" to rebuild things is more
# restricted, particularly if the source code has been removed or
# is otherwise unavailable.  So these options are recommended only for
# pre-compiled binaries or static installations for which no patching
# is expected to occur.
AC_ARG_ENABLE(
  collapse,
  [AS_HELP_STRING([--enable-collapse],
   [Collapse install directory structure: "yes" (no component dirs) or "all" (no component dirs and no architecture-specific dir) (default: "no")])],
  h_collapse=$enableval,
  h_collapse=no
)

AC_ARG_ENABLE(
  shared,
  [AS_HELP_STRING([--disable-shared],
   [Do not build shared libraries (not recommended)])],
  h_shared=$enableval,
  h_shared=yes
)
AC_ARG_ENABLE(
  static,
  [AS_HELP_STRING([--enable-static],
   [Do not build shared libraries (not recommended)])],
  [ if test $enableval = yes; then h_shared=no; fi ]
)

h_symbols=no
AC_ARG_ENABLE(
  symbols,
  [AS_HELP_STRING([--enable-symbols],
   [Turn all optimization off & do not strip debugging symbols from binaries (default: off)])],
  [ if test $enableval = yes; then h_symbols=yes; fi ]
)

h_strip=enabled
AC_ARG_ENABLE(
  strip,
  [AS_HELP_STRING([--disable-strip],
   [Do not strip debugging symbols from binaries (default: on)])],
  [ if test $enableval != yes; then h_strip=no; fi ],
  [ h_strip=yes ]
)

# Check for symbols/strip conflict:
if test $h_symbols = yes; then
   if test $h_strip = enabled; then
      AC_MSG_WARN('--enable-symbols' and '--enable-strip' conflict.)
      AC_MSG_WARN(Disabling strip.)
   fi
   h_strip=no
else
   if test $h_strip = enabled; then
      h_strip=yes
   fi
fi

AC_ARG_ENABLE(
  x,
  [AS_HELP_STRING([--disable-x],
   [Turn off X11 dependencies])],
  h_x11=$enableval,
  h_x11=yes
)

h_openmp=no
AC_ARG_ENABLE(
  openmp, [],
  [ if test $enableval = yes; then h_openmp=yes; fi ]
)

# Readline: Force our readline to build if --enable-readline option is given:
AC_ARG_ENABLE(readline,
  [AS_HELP_STRING([--enable-readline],
   [Force build of headas/heacore/readline])],
  [if test "x$enableval" = xno; then
     force_readline_build=no
   else
     force_readline_build=yes
   fi],
  [force_readline_build=no]
)
# Force readline to build (if available) on Darwin, where libreadline
# is a symbolic link to "libedit", which we cannot currently use:
if test "x$force_readline_build" = xno -a `echo $host | grep -c darwin` -ne 0; then
  force_readline_build=yes
  AC_MSG_RESULT(Will force readline build on Darwin if available)
fi

h_xs_models_only=no
AC_ARG_ENABLE(
  xs-models-only,
  [AS_HELP_STRING([--enable-xs-models-only],
   [Only build Xspec models libraries])],
  [ if test $enableval = yes; then h_xs_models_only=yes; fi ]
)

h_hera_build=no
AC_ARG_ENABLE(
  hera,
  [AS_HELP_STRING([--enable-hera],
   [Build for HERA project (GSFC only)])],
  [ if test $enableval = yes; then h_hera_build=yes; fi ]
)

AC_ARG_ENABLE(
  fv-standalone,
  [AS_HELP_STRING([--enable-fv-standalone],
   [Build stand-alone fv GUI (GSFC only)])],
  fv_build=$enableval,
  fv_build=no
)
if test "x$fv_build" = "xyes"; then
  h_components="heacore tcltk ftools"
  h_shared=no
fi

# PNG library & header file location:
h_png_pfx=
AC_ARG_WITH(
  png,
  [AS_HELP_STRING([--with-png],
   [Specify location of PNG library and headers e.g. '/usr' ])],
  h_png_pfx=$withval
)

# configurable optimization
h_copt=
AC_ARG_WITH(
  copt,
  [AS_HELP_STRING([--with-copt],
   [Set C compiler optimization (e.g. "-O" or "-fast")])],
  h_copt=$withval
)
h_cxxopt=
AC_ARG_WITH(
  cxxopt,
  [AS_HELP_STRING([--with-cxxopt],
   [Set C++ compiler optimization (e.g. "-O" or "-fast")])],
  h_cxxopt=$withval
)
h_fopt=
AC_ARG_WITH(
  fopt,
  [AS_HELP_STRING([--with-fopt],
   [Set Fortran compiler optimization (e.g. "-O" or "-fast")])],
  h_fopt=$withval
)

h_ldopt=yes
AC_ARG_ENABLE(
  ldopt,
  [AS_HELP_STRING([--disable-ldopt],
   [ Disable linker optimization ])],
  [ if test $enableval = no; then h_ldopt=no; fi ]
)

h_build_root=no
AC_ARG_WITH(
  root,
  [AS_HELP_STRING([--with-root],
   [ Build the CERN ROOT package ])],
  [ if test $withval = yes; then h_build_root=yes; fi ]
)

h_build_lynx=yes
AC_ARG_WITH(
  lynx,
  [AS_HELP_STRING([--without-lynx],
   [ Disable building the lynx linemode browser (used by fhelp) ])],
  [ if test $withval = no; then h_build_lynx=no; fi ]
)

# Force an Intel build on ARM Macs if the --enable-mac_intel_build
# option is given:
h_mac_intel_build=no
AC_ARG_ENABLE(
  mac_intel_build,
  [AS_HELP_STRING([--enable-mac_intel_build],
   [Force an Intel/x86_64 build on M1/arm64 Macs ])],
  [ if test $enableval = yes; then h_mac_intel_build=yes; fi ]
)

#-------------------------------------------------------------------------------
# Remove leading and trailing whitespace from component list.
h_components=`echo $h_components | sed 's%^[ 	]*%%; s%[ 	]$%%'`

# Get details about this script and its location.
h_this_script=`echo $0 | sed 's%.*/%%'`
h_this_dir=`echo $0 | sed "s%$h_this_script\$%%"`
if test "x$h_this_dir" = x; then h_this_dir=.; fi

# Top of source tree.
h_top=`cd $h_this_dir/..; pwd`

if test `echo $h_top | grep -c " "` -ne 0; then
  AC_MSG_RESULT(Path has one or more directory names which include spaces:)
  AC_MSG_RESULT($h_top)
  AC_MSG_ERROR(Directory paths with spaces are not allowed in HEASOFT!)
fi

HD_SRC=$h_top

h_components_found=
if test "x$h_components" = x; then
  for dir in $h_all_components; do
    if test -d $h_top/$dir; then
      AC_MSG_RESULT(Found component $dir)
      h_components_found="$h_components_found $dir"
    else
      AC_MSG_RESULT(Did not find component $dir - skipping $dir)
    fi
  done
else
  for dir in $h_components; do
    if test -d $h_top/$dir; then
      AC_MSG_RESULT(Found component $dir)
      if test -f $h_top/$dir/BUILD_DIR/hd_config_info; then
        AC_MSG_RESULT(Found $dir/BUILD_DIR/hd_config_info)
        h_components_found="$h_components_found $dir"
      else
        AC_MSG_RESULT(Could not find $dir/BUILD_DIR/hd_config_info - skipping $dir)
      fi
    else
      AC_MSG_ERROR(Could not find component $dir)
    fi
  done
fi
h_components=$h_components_found

# Set the prefix to use in all recursive configures.
if test $prefix = NONE; then
  prefix=`cd $h_this_dir/..; pwd`
else
  if test `echo $prefix | grep -c ${PWD}` -ne 0; then
    AC_MSG_ERROR(Prefix should not be a subdirectory of this BUILD_DIR)
  fi
fi

# Set the exec_prefix to use in all recursive configures. This
# exec_prefix setting is used here in the top-level Makefile.in.
# The individual heasoft components are passed h_heatop=$prefix
# (via the hd_config_info files) to assign their own values for
# prefix and exec_prefix, which are also then passed to any
# third-party configure commands.
if test $exec_prefix = NONE; then
  if test $h_collapse = all; then
    exec_prefix="$prefix"
  else
    exec_prefix="$prefix/$host"
  fi
fi

# Name of the utility which scans configuration files for dependencies.
hd_scanenv="$h_this_dir/hd_scanenv"
hd_conf_file="hd_config_info"

# Determine which components should be configured on this go-around
HD_SELECTED=
HD_SELECTED_DIRS=
if test "x$h_components" != xno; then
  # Loop over components, and make a list of configuration files which
  # includes dependencies of the original components as well as the
  # original components.
  for h_dep in $h_components; do
    h_config_comp_list=
    h_config_dir_list=
    while test "x$h_dep" != x; do

      changequote(,)
      # Get next component from the back of the list.
      h_comp=`echo $h_dep | sed 's%.*[ 	][ 	]*%%'`

      # Remove this component from the back of the list.
      h_dep=`echo $h_dep | sed -ne "s%[ 	][ 	]*$h_comp\$%%p"`
      changequote([,])

      # Find the configuration directory.
      if test -f $h_top/$h_comp/BUILD_DIR/$hd_conf_file; then
        h_dir=$h_top/$h_comp/BUILD_DIR
      else
        AC_MSG_WARN(Unable to find a configuration dir for $h_comp)
        h_dir=
      fi

      # From the configuration directory, extract dependencies. These are the
      # names of other components needed by the current component.
      if test "x$h_dir" != x; then
        h_tmp=`$hd_scanenv $h_dir/$hd_conf_file DEPENDENCIES`
      else
        h_tmp=
      fi

      if test "x$h_tmp" != x; then
        AC_MSG_RESULT(Component $h_comp requires $h_tmp)
        h_dep="$h_dep $h_tmp"
      fi

      # Put the current configuration directory into the output
      # configuration directory list.
      if test "x$h_dir" != x; then
        h_config_comp_list="$h_comp $h_config_comp_list"
      fi

      # Put the current configuration directory into the output
      # configuration directory list.
      if test "x$h_dir" != x; then
        h_config_dir_list="$h_dir $h_config_dir_list"
      fi

    done
    HD_SELECTED="$HD_SELECTED $h_config_comp_list"
    HD_SELECTED_DIRS="$HD_SELECTED_DIRS $h_config_dir_list"
  done
fi

#  while test "x$h_tmp" != x; do
#    changequote(,)
#    # Get next component from the back of the list.
#    h_comp=`echo $h_tmp | sed 's%.*[ 	][ 	]*%%'`
#
#    # Remove this component from the back of the list.
#    h_tmp=`echo $h_tmp | sed -ne "s%[ 	][ 	]*$h_comp\$%%p"`
#    changequote([,])
#
#    # Put this component on the grand list of components.
#    HD_SELECTED="$HD_SELECTED$h_comp "
#
#    # Find the configuration directory.
#    if test -f $h_top/$h_comp/BUILD_DIR/$hd_conf_file; then
#      h_dir=$h_top/$h_comp/BUILD_DIR
#    else
#      AC_MSG_ERROR(Unable to find a configuration dir for $h_comp)
#    fi
#
#    # From the configuration directory, extract dependencies. These are the
#    # names of other components needed by the current component.
#    h_dep=`$hd_scanenv $h_dir/$hd_conf_file DEPENDENCIES`
#
#    # Put these dependencies onto the back the list of components so
#    # that they too can be handled in this loop.
#    if test "x$h_dep" != x; then h_tmp="$h_tmp $h_dep"; fi
#
#    # Put the current configuration directory into the output
#    # configuration directory list.
#    h_config_dir_list="$h_dir $h_config_dir_list"
#  done

# Eliminate duplicates from list of selected components.
h_tmp=
for h_comp in $HD_SELECTED; do
  if test `echo $h_tmp | tr ' ' '\012' | grep -c "^$h_comp$"` -eq 0; then
    h_tmp="$h_tmp$h_comp "
  fi
done
HD_SELECTED=$h_tmp

# Eliminate duplicates from configuration directory list.
h_tmp=
for h_comp in $HD_SELECTED_DIRS; do
  if test `echo $h_tmp | tr ' ' '\012' | grep -c "^$h_comp$"` -eq 0; then
    h_tmp="$h_tmp$h_comp "
  fi
done
HD_SELECTED_DIRS=$h_tmp

#-------------------------------------------------------------------------------
# Settings dependent on component selections:
#-------------------------------------------------------------------------------
# - Disable heacore perl modules unless swift or demo are present.
# - Set flags for tcltk components appropriate for existing packages (to
#   minimize/eliminate unnecessary configuration & compilation).

# heacore:
ahfits_required=no
ahgen_required=no
ahlog_required=no
ccfits_required=no
heacore_perlmods_required=no
heaapp_required=no
heasp_required=no
heaev_required=no
hoops_required=no
lynx_required=no
fftw_required=no
fgsl_required=no
gsl_required=no
mpfit_required=no
st_stream_required=no
wcslib_required=no
wcstools_required=no
# tcltk:
pgplot_required=no
pgplot_perlmod_required=no
tkpgplot_required=no
plt_required=no
pow_required=no
tcl_required=no
tk_required=no
tclreadline_required=no
xpa_required=no
extra_gui_libs_required=no
iwidgets220_required=no

# Switch to stop configuration if clang isn't supported by an included
# component.  Add "clang_supported=no" for a component below if needed.
clang_supported=yes

# Used as a configure switch for heacore, where heasoftpy ostensibly
# lives:
h_heasoftpy_required=no

if test $h_build_lynx = yes -a -d $h_top/heacore/fhelp; then
   lynx_required=yes
fi

if test -d $h_top/heacore/heautils; then
   fftw_required=yes
fi

for dir in $HD_SELECTED; do
  if test `echo $dir | grep -c hitomixrism` -ne 0; then
     ahfits_required=yes
     ahgen_required=yes
     ahlog_required=yes
     heaapp_required=yes
#    st_stream_required=yes
  fi
  if test `echo $dir | grep -c attitude` -ne 0; then
     mpfit_required=yes
     if test -d $h_top/attitude/lib/aber; then
       ahlog_required=yes
     fi
     ah_attasks="aberattitude aberposition attconvert coordevt coordpnt det2att2"
     for ah_attask in $ah_attasks; do
       if test -d $h_top/attitude/tasks/$ah_attask; then
         ahlog_required=yes
         heaapp_required=yes
       fi
     done
  fi
  if test `echo $dir | grep -c demo` -ne 0; then
     heacore_perlmods_required=yes
  fi
  if test `echo $dir | grep -c ftools` -ne 0; then
     if test -d $h_top/ftools/ftoolslib; then
       fgsl_required=yes
       gsl_required=yes
     fi
     if test -d $h_top/ftools/asca; then
       pgplot_required=yes
       plt_required=yes
     fi
     if test -d $h_top/ftools/futils; then
       pgplot_required=yes
       plt_required=yes
     fi
     if test -d $h_top/ftools/gro; then
       pgplot_required=yes
     fi
     if test -d $h_top/ftools/guis; then
       pow_required=$h_x11
       extra_gui_libs_required=$h_x11
       tcl_required=yes
       tk_required=$h_x11
       wcslib_required=yes
       if test `echo $host | grep -c cygwin` -eq 0; then
         xpa_required=$h_x11
       fi
     fi
     if test -d $h_top/ftools/heasarc; then
       if test -d $h_top/ftools/heasarc/tasks/fovdsp; then
         pgplot_required=yes
       fi
       if test -d $h_top/ftools/heasarc/tasks/pileest; then
         heacore_perlmods_required=yes
       fi
       if test -d $h_top/ftools/heasarc/tasks/searchflickpix; then
         ahlog_required=yes
         heaapp_required=yes
       fi
     fi
     if test -d $h_top/ftools/image; then
       ast_required=yes
       pgplot_required=yes
       plt_required=yes
       tcl_required=yes
       tclreadline_required=yes
       tk_required=$h_x11
       tkpgplot_required=$h_x11
     fi
     if test -d $h_top/ftools/qdp; then
       pgplot_required=yes
       plt_required=yes
     fi
     if test -d $h_top/ftools/timing; then
       pgplot_required=yes
       plt_required=yes
     fi
     if test -d $h_top/ftools/xselect; then
       pgplot_required=yes
       plt_required=yes
       tcl_required=yes
       tk_required=$h_x11
     fi
     if test -d $h_top/ftools/xte; then
       heacore_perlmods_required=yes
       extra_gui_libs_required=$h_x11
       iwidgets220_required=$h_x11
       tcl_required=yes
       tk_required=$h_x11
     fi
  fi
  if test `echo $dir | grep -c heagen` -ne 0; then
     heacore_perlmods_required=yes
     wcslib_required=yes
     ccfits_required=yes
     heasp_required=yes
     heaev_required=yes
     if test -d $h_top/heagen/raytrace; then
       ahfits_required=yes
       ahgen_required=yes
       ahlog_required=yes
       heaapp_required=yes
     fi
  fi
  if test `echo $dir | grep -c heasim` -ne 0; then
     ccfits_required=yes
     heasp_required=yes
     wcslib_required=yes
  fi
  if test `echo $dir | grep -c heasptools` -ne 0; then
     ccfits_required=yes
     heasp_required=yes
     wcslib_required=yes
  fi
  if test `echo $dir | grep -c heatools` -ne 0; then
     heacore_perlmods_required=yes
     wcslib_required=yes
  fi
  if test `echo $dir | grep -c ixpe` -ne 0; then
     h_heasoftpy_required=yes
  fi
  if test `echo $dir | grep -c external` -ne 0; then
     # Root builds are not currently supported on Macs:
     if test "x$h_build_root" = xyes -a `echo $host | grep -c darwin` -ne 0; then
       AC_MSG_ERROR(Root not supported on $host)
     fi
  fi
  if test `echo $dir | grep -c glast` -ne 0; then
     if test "x$force_readline_build" = xno; then
        AC_MSG_RESULT(glast component requires our copy of readline)
     fi
     force_readline_build=yes
     hoops_required=yes
     st_stream_required=yes
     tcl_required=yes
     tk_required=$h_x11
     xpa_required=$h_x11
  fi
  if test `echo $dir | grep -c maxi` -ne 0; then
     heacore_perlmods_required=yes
     wcslib_required=yes
  fi
  if test `echo $dir | grep -c nicer` -ne 0; then
     heacore_perlmods_required=yes
  fi
  if test `echo $dir | grep -c nustar` -ne 0; then
     heacore_perlmods_required=yes
  fi
  if test `echo $dir | grep -c suzaku` -ne 0; then
     heacore_perlmods_required=yes
     mpfit_required=yes
  fi
  if test `echo $dir | grep -c swift` -ne 0; then
     heacore_perlmods_required=yes
     mpfit_required=yes
     pgplot_required=yes
     pgplot_perlmod_required=yes
     wcslib_required=yes
     wcstools_required=yes
  fi
  if test `echo $dir | grep -c Xspec` -ne 0; then
     wcslib_required=yes
     ccfits_required=yes
     fgsl_required=yes
     gsl_required=yes
     heasp_required=yes
     pgplot_required=yes
     plt_required=yes
     tcl_required=yes
     tclreadline_required=yes
     if test `echo $host | grep -c osf` -ne 0; then
        AC_MSG_ERROR(Xspec 12 is not supported on OSF!)
     fi
     if test "x$h_shared" = xno; then
        AC_MSG_ERROR(Xspec 12 requires shared libraries!)
     fi
  fi
done

# If an Intel build is being requested on M1/ARM, force the x86_64 name:
if test `echo $host | grep -c aarch64-apple-darwin` -ne 0 -a "$h_mac_intel_build" = yes; then
  actual_host="$host"
  host=`echo $host | sed 's:aarch64:x86_64:'`
  build=`echo $build | sed 's:aarch64:x86_64:'`
  target=`echo $target | sed 's:aarch64:x86_64:'`
  exec_prefix=`echo $exec_prefix | sed 's:aarch64:x86_64:'`
  AC_MSG_RESULT(HEASoft build type is $host)
fi

#-------------------------------------------------------------------------------
# Piece together appropriate heacore & tcltk package components based on
# the needs of selected headas components (order is important here).
# Handling of readline in the heacore component list is done by the
# heacore configure script.
#-------------------------------------------------------------------------------

h_heacore_components=

if test "$lynx_required" = yes; then
  h_heacore_components="lynx"
fi

if test "$fgsl_required" = yes; then
  h_heacore_components="$h_heacore_components gsl fgsl"
else
  if test "$gsl_required" = yes; then
    h_heacore_components="$h_heacore_components gsl"
  fi
fi

if test "$fftw_required" = yes; then
  h_heacore_components="$h_heacore_components fftw"
fi

# heacore components which most builds will need. cfitsio needed
# by all, but hmake may safely skip the others if not included:
h_heacore_components="$h_heacore_components cfitsio ape heaio heautils"

if test "$ahlog_required" = yes; then
  h_heacore_components="$h_heacore_components ahlog"
fi

# heainit will eventually need to come after ahlog:
h_heacore_components="$h_heacore_components heainit"

if test "$ahgen_required" = yes; then
  h_heacore_components="$h_heacore_components ahgen"
fi
if test "$ahfits_required" = yes; then
  h_heacore_components="$h_heacore_components ahfits"
fi
if test "$heaapp_required" = yes; then
  h_heacore_components="$h_heacore_components heaapp"
fi
if test "$mpfit_required" = yes; then
  h_heacore_components="$h_heacore_components mpfit"
fi
if test "$ast_required" = yes; then
  h_heacore_components="$h_heacore_components ast"
fi
if test "$wcslib_required" = yes; then
  h_heacore_components="$h_heacore_components wcslib"
fi
if test "$wcstools_required" = yes; then
  h_heacore_components="$h_heacore_components wcstools"
fi
if test "$ccfits_required" = yes; then
  h_heacore_components="$h_heacore_components CCfits"
fi
if test "$heasp_required" = yes; then
  h_heacore_components="$h_heacore_components heasp"
fi
if test "$heaev_required" = yes; then
  h_heacore_components="$h_heacore_components heaev"
fi
if test "$hoops_required" = yes; then
  h_heacore_components="$h_heacore_components hoops"
fi
if test "$st_stream_required" = yes; then
  h_heacore_components="$h_heacore_components st_stream"
fi
if test "$heacore_perlmods_required" = yes; then
  h_heacore_components="$h_heacore_components fitsperl pilperl hdutilsperl hdinitperl"
fi

h_heacore_components="$h_heacore_components perl fhelp help refdata"

h_tcltk_components=

if test "$tcl_required" = yes; then
  h_tcltk_components="tcl"
fi
if test "$tk_required" = yes; then
  h_tcltk_components="$h_tcltk_components tk"
fi
if test "$tclreadline_required" = yes; then
  h_tcltk_components="$h_tcltk_components tclreadline"
fi
if test "$xpa_required" = yes; then
  h_tcltk_components="$h_tcltk_components xpa"
fi
if test "$pgplot_required" = yes; then
  h_tcltk_components="$h_tcltk_components pgplot"
fi
if test "$plt_required" = yes; then
  h_tcltk_components="$h_tcltk_components plt"
fi
if test "$pow_required" = yes; then
  h_tcltk_components="$h_tcltk_components pow"
fi
if test "$extra_gui_libs_required" = yes; then
  h_tcltk_components="$h_tcltk_components itcl itk"
  if test "$iwidgets220_required" = yes; then
    h_tcltk_components="$h_tcltk_components iwidgets220"
  fi
  h_tcltk_components="$h_tcltk_components iwidgets"
  if test `echo $host | grep -c cygwin` -eq 0; then
    h_tcltk_components="$h_tcltk_components tix"
  fi
fi
if test "$pgplot_perlmod_required" = yes; then
  h_tcltk_components="$h_tcltk_components pgplotperl"
fi

# Xspec models-only build:

# Default Xspec subdir list:
h_Xspec_components="src/xslib src/XSUtil src/XSFunctions src/XSModel src/XSStat src/XSFit src/XSPlot src/XSModel/Model/MixFunction src/XSFit/FitMethod/Minuit/minuit2/src src/XSFit/FitMethod/Minuit src/XSUser python mpython Integral src/tools src/main"

if test "$h_xs_models_only" = yes; then
  h_heacore_components="gsl fgsl fftw cfitsio ape heaio heautils wcslib CCfits heasp"
  h_tcltk_components=""
  h_Xspec_components="src/xslib src/XSUtil src/XSFunctions mpython"
  #force_readline_build=no
  HD_SELECTED="heacore Xspec"
  HD_SELECTED_DIRS="$h_top/heacore/BUILD_DIR $h_top/Xspec/BUILD_DIR"
fi

# FV stand-alone build:

# Default ftools subdir list:
h_ftools_components="refdata bin.perl xanlib ftoolslib cftoolslib callib asca caltools einstein exosat fimage futils gro heao1 oso8 qdp rosat time timing/xronos heasarc vela5b xselect xstar xte image guis"

if test "x$fv_build" = "xyes"; then
  force_readline_build=no
  h_heacore_components="cfitsio wcslib"
  h_tcltk_components="tcl tk xpa pow itcl itk iwidgets tix"
  h_ftools_components="guis"
  HD_SELECTED="heacore tcltk ftools"
  HD_SELECTED_DIRS="$h_top/heacore/BUILD_DIR $h_top/tcltk/BUILD_DIR $h_top/ftools/BUILD_DIR"
fi

# Remove leading whitespace (if any) from heacore component list.
h_heacore_components=`echo $h_heacore_components | sed 's%^ *%%'`

# Remove leading whitespace (if any) from tcltk component list.
h_tcltk_components=`echo $h_tcltk_components | sed 's%^ *%%'`

if test "x$h_build_root" = xno; then
  h_external_components="clhep cppunit f2c fftw python pmw pyfits lapack numpy scipy matplotlib minuit2 swig xerces"
else
  h_external_components="clhep cppunit f2c fftw python pmw pyfits lapack numpy scipy matplotlib root swig xerces"
fi

# Handle case in which no actual tcltk components were needed:
if test "x$h_tcltk_components" = x; then
  HD_SELECTED=`echo $HD_SELECTED | sed 's% tcltk%%'`
  HD_SELECTED_DIRS=`echo $HD_SELECTED_DIRS | sed "s% $h_top/tcltk/BUILD_DIR%%"`
fi

#-------------------------------------------------------------------------------
# Before we go any further, check basic health of compiler choices:
#-------------------------------------------------------------------------------

AC_MSG_NOTICE([Preliminary check of compiler choices...])

APPLEXCODE="no"
# Existence of CC:
if test "x$CC" != x; then
  AC_MSG_NOTICE([Checking your C compiler setting ($CC)])
  if test ! -x $CC; then
    # Allow for $CC to have been set without a path:
    AC_CHECK_PROG(CCTEST,$CC,yes,no)
    if test "x$CCTEST" = xno; then
      AC_MSG_ERROR($CC is unusable or does not exist)
    fi
  fi
  # Check support for XCode clang version:
  if test `echo $host | grep -c apple-darwin` -ne 0; then
    if test `$CC --version | grep -ci 'Apple'` -ne 0; then
      APPLEXCODE="yes"
      # PLACEHOLDER now since clang_supported=yes for all components:
      if test "x$clang_supported" = xno; then
        AC_MSG_CHECKING([whether Apple XCode $CC is supported for your selected components])
        changequote(,)
        xcode_new=`$CC -dumpversion | grep -c '^[1][23456789]\.[0123456789]'`
        changequote([,])
        if test $xcode_new -eq 0; then
          AC_MSG_RESULT(yes)
        else
          AC_MSG_RESULT(no)
          AC_MSG_WARN(This compiler is not yet supported for ____)
          AC_MSG_WARN(Visit the following link for more information:)
          AC_MSG_WARN(http://heasarc.gsfc.nasa.gov/lheasoft/macos.html)
          AC_MSG_ERROR(Please choose a different C compiler)
        fi
      fi
    fi
    # Check compiler architecture:
    AC_MSG_CHECKING([architecture of $CC])
    echo "int main(){return(0);}" > /tmp/$$.c
    $CC -v -o /tmp/hdctest.o /tmp/$$.c 2> /tmp/$$.log
    if test `file /tmp/hdctest.o | grep -ci 'x86_64'` -ne 0; then
      AC_MSG_RESULT(x86_64)
      # Disallow Intel compiler for M1 build:
      if test `echo $host | grep -c aarch64` -ne 0; then
        AC_MSG_WARN(An M1/arm64 build requires arm64 compilers)
        AC_MSG_ERROR(Please choose an arm64 C compiler or use the 'mac_intel_build' option instead)
      fi
    elif test `file /tmp/hdctest.o | grep -ci 'arm64'` -ne 0; then
      AC_MSG_RESULT(arm64)
      # Disallow M1 compiler for Intel build, unless Rosetta can be used:
      if test `echo $host | grep -c x86_64` -ne 0; then
        if test "x$APPLEXCODE" = xno; then
          AC_MSG_WARN(An Intel/x86_64 build requires x86_64 compilers)
          AC_MSG_ERROR(Please choose an x86_64 C compiler)
        else
          # Try Rosetta flag for clang:
          $CC -v -arch x86_64 -o /tmp/hdctest.o /tmp/$$.c 2> /tmp/$$.log
          if test `file /tmp/hdctest.o | grep -ci 'x86_64'` -ne 0; then
            AC_MSG_NOTICE(Will use '-arch x86_64' Rosetta flag for $CC)
          fi
        fi
      fi
    else
      AC_MSG_RESULT(unknown...this may not work...)
    fi
    rm -rf /tmp/$$.* /tmp/hdctest.o
  fi
  # Check functionality:
  AC_PROG_CC
else
  AC_MSG_NOTICE([CC not set, will look for a C compiler downstream.])
fi

APPLEXCODE="no"
# Existence of CXX:
if test "x$CXX" != x; then
  AC_MSG_NOTICE([Checking your C++ compiler setting ($CXX)])
  if test ! -x $CXX; then
    # Allow for $CXX to have been set without a path:
    AC_CHECK_PROG(CXXTEST,$CXX,yes,no)
    if test "x$CXXTEST" = xno; then
      AC_MSG_ERROR($CXX is unusable or does not exist)
    fi
  fi
  # APPLE
  if test `echo $host | grep -c apple-darwin` -ne 0; then
    if test `$CXX --version | grep -ci 'Apple'` -ne 0; then
      APPLEXCODE="yes"
    fi
    # Check compiler architecture:
    AC_MSG_CHECKING([architecture of $CXX])
    echo "int main(){return(0);}" > /tmp/$$.cxx
    $CXX -v -o /tmp/hdcxxtest.o /tmp/$$.cxx 2> /tmp/$$.log
    if test `file /tmp/hdcxxtest.o | grep -ci 'x86_64'` -ne 0; then
      AC_MSG_RESULT(x86_64)
      # Disallow Intel compiler for M1 build:
      if test `echo $host | grep -c aarch64` -ne 0; then
        AC_MSG_WARN(An M1/arm64 build requires arm64 compilers)
        AC_MSG_ERROR(Please choose an arm64 C++ compiler or use the 'mac_intel_build' option instead)
      fi
    elif test `file /tmp/hdcxxtest.o | grep -ci 'arm64'` -ne 0; then
      AC_MSG_RESULT(arm64)
      # Disallow M1 compiler for Intel build, unless Rosetta can be used:
      if test `echo $host | grep -c x86_64` -ne 0; then
        if test "x$APPLEXCODE" = xno; then
          AC_MSG_WARN(An Intel/x86_64 build requires x86_64 compilers)
          AC_MSG_ERROR(Please choose an x86_64 C++ compiler)
        else
          # Try Rosetta flag for clang++:
          $CXX -v -arch x86_64 -o /tmp/hdcxxtest.o /tmp/$$.cxx 2> /tmp/$$.log
          if test `file /tmp/hdcxxtest.o | grep -ci 'x86_64'` -ne 0; then
            AC_MSG_NOTICE(Will use '-arch x86_64' Rosetta flag for $CXX)
          fi
        fi
      fi
    else
      AC_MSG_RESULT(unknown...this may not work...)
    fi
    rm -rf /tmp/$$.* /tmp/hdcxxtest.o
  fi
  # Check functionality:
  AC_PROG_CXX
else
  AC_MSG_NOTICE([CXX not set, will look for a C++ compiler downstream.])
fi

# Existence of FC:
if test "x$FC" != x; then
  AC_MSG_NOTICE([Checking your Fortran compiler setting ($FC)])
  if test ! -x $FC; then
    # Allow for $FC to have been set without a path:
    AC_CHECK_PROG(FCTEST,$FC,yes,no)
    if test "x$FCTEST" = xno; then
      AC_MSG_ERROR($FC is unusable or does not exist)
    fi
  fi
  # APPLE
  if test `echo $host | grep -c apple-darwin` -ne 0; then
    # Check compiler architecture:
    AC_MSG_CHECKING([architecture of $FC])
    echo "      program fortrantest" > /tmp/$$.f
    echo "      end" >> /tmp/$$.f
    $FC -v -o /tmp/hdftest.o /tmp/$$.f 2> /tmp/$$.log
    if test `file /tmp/hdftest.o | grep -ci 'x86_64'` -ne 0; then
      AC_MSG_RESULT(x86_64)
      # Disallow Intel compiler for M1 build:
      if test `echo $host | grep -c aarch64` -ne 0; then
        AC_MSG_WARN(An M1/arm64 build requires arm64 compilers)
        AC_MSG_ERROR(Please choose an arm64 Fortran compiler or use the 'mac_intel_build' option instead)
      fi
    elif test `file /tmp/hdftest.o | grep -ci 'arm64'` -ne 0; then
      AC_MSG_RESULT(arm64)
      # Disallow M1 compiler for Intel build:
      if test `echo $host | grep -c x86_64` -ne 0; then
        AC_MSG_WARN(An Intel/x86_64 build requires x86_64 compilers)
        AC_MSG_ERROR(Please choose an x86_64 Fortran compiler)
      fi
    else
      AC_MSG_RESULT(unknown...this may not work...)
    fi
    rm -rf /tmp/$$.* /tmp/hdftest.o
  fi
  # Check functionality:
  AC_PROG_FC
else
  AC_MSG_NOTICE([FC not set, will look for a Fortran compiler downstream.])
fi

# PERL:
if test "x$PERL" != x; then
  AC_MSG_NOTICE([Checking your Perl setting ($PERL)])
  if test ! -x $PERL; then
    # Allow for $PERL to have been set without a path:
    AC_CHECK_PROG(PERLTEST,$PERL,yes,no)
    if test "x$PERLTEST" = xno; then
      AC_MSG_ERROR($PERL is unusable or does not exist)
    fi
  fi
  if test `echo $host | grep -c x86_64-apple-darwin` -ne 0 -a `echo $actual_host | grep -c aarch64` -ne 0; then
    if test `file \`which $PERL\` | grep -ci 'arm64'` -ne 0; then
      AC_MSG_WARN(An Intel/x86_64 build requires x86_64 Perl)
      AC_MSG_ERROR(Please choose an x86_64 Perl)
    fi
  elif test `echo $host | grep -c aarch64` -ne 0; then
    if test `file \`which $PERL\` | grep -ci 'arm64'` -eq 0; then
      AC_MSG_WARN(arm64 build requires an arm64 Perl)
      AC_MSG_ERROR(Please choose an arm64-compatible Perl)
    fi
  fi
  AC_MSG_RESULT(ok)
fi

# PYTHON:
if test "x$PYTHON" != x; then
  AC_MSG_NOTICE([Checking your Python setting ($PYTHON)])
  if test ! -x $PYTHON; then
    # Allow for $PYTHON to have been set without a path:
    AC_CHECK_PROG(PYTHONTEST,$PYTHON,yes,no)
    if test "x$PYTHONTEST" = xno; then
      AC_MSG_ERROR($PYTHON is unusable or does not exist)
    fi
  fi
  if test `file \`which $PYTHON\` | grep -ci 'ascii'` -ne 0; then
    AC_MSG_RESULT($PYTHON is non-binary)
  else
    if test `echo $host | grep -c x86_64-apple-darwin` -ne 0 -a `echo $actual_host | grep -c aarch64` -ne 0; then
      if test `file \`which $PYTHON\` | grep -ci 'arm64'` -ne 0; then
        AC_MSG_WARN(An Intel/x86_64 build requires x86_64 Python)
        AC_MSG_ERROR(Please choose an x86_64 Python)
      fi
    elif test `echo $host | grep -c aarch64` -ne 0; then
      if test `file \`which $PYTHON\` | grep -ci 'arm64'` -eq 0; then
        AC_MSG_WARN(arm64 build requires an arm64 Python)
        AC_MSG_ERROR(Please choose an arm64-compatible Python)
      fi
    fi
    AC_MSG_RESULT(ok)
  fi
fi

#-------------------------------------------------------------------------------
# Recursively configure all selected components.
#-------------------------------------------------------------------------------
for h_dir in $HD_SELECTED_DIRS; do
  h_comp=`$hd_scanenv $h_dir/$hd_conf_file COMPONENT`
  h_config_heacore=`$hd_scanenv $h_dir/$hd_conf_file HEACORE`
  h_config_heatools=`$hd_scanenv $h_dir/$hd_conf_file HEATOOLS`
  h_config_cmd=`$hd_scanenv $h_dir/$hd_conf_file CONFIGURE_CMD`
  if test $? -ne 0 -o "x$h_config_cmd" = x; then
    AC_MSG_ERROR(Unable to determine how to run configure for $h_comp)
  fi
  # Empty target_alias unless it was specified on the command line.
  # This is to short-circuit attempts to find compilers named e.g.
  # "$target_alias-gcc"
  if test "x$target_alias_used" != "xyes"; then
    target=""
  fi

  AC_MSG_RESULT(--------------------------------------------------------------------------------)
  eval echo \"$h_config_cmd\"
  (eval $h_config_cmd)
  if test $? -ne 0; then
     AC_MSG_ERROR(Configure failed in $h_dir!)
  fi

  AC_MSG_RESULT(--------------------------------------------------------------------------------)
done

#-------------------------------------------------------------------------------
# Macros needed in generating Makefile & headas-setup:
#-------------------------------------------------------------------------------
BSUF=
case ${UNAME_SYSTEM} in
  CYGWIN*)
    BSUF=.exe
    EXT=win
    ;;
  Darwin*)
    EXT=darwin
    ;;
  IRIX*)
    AC_MSG_ERROR(IRIX is not currently supported)
    EXT=irix
    ;;
  Linux*)
    EXT=lnx
    ;;
  OSF*)
    EXT=osf
    ;;
  SunOS*)
    EXT=sol
  ;;
esac
AC_SUBST(BSUF)
AC_SUBST(EXT)

AC_PATH_PROGS(PERL, perl perl5)
if test "x$PERL" = x; then
  AC_MSG_ERROR(Perl is required!)
fi
AC_SUBST(PERL)

# Check whether heacore compiler test forced C into 32-bit mode:
heacore_hmakerc="$h_top/heacore/BUILD_DIR/hmakerc"
if test -f $heacore_hmakerc; then
  HD_BUILD_ARCH_32_BIT=`$hd_scanenv $heacore_hmakerc HD_BUILD_ARCH_32_BIT`
fi
AC_SUBST(HD_BUILD_ARCH_32_BIT)

AC_SUBST(UNAME_SYSTEM)

AC_SUBST(HD_SELECTED)
AC_SUBST(HD_SRC)

AC_CONFIG_FILES([Makefile headas-setup fermi-setup])
AC_OUTPUT

if test -f headas-setup; then chmod +x headas-setup; fi
if test -f fermi-setup; then chmod +x fermi-setup; fi

echo "Finished"
